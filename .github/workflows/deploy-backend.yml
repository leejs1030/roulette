name: Build, Push to Docker Hub, and Deploy Backend to EC2

on:
  push:
    branches:
      - main # Or your primary deployment branch
    paths:
      - 'backend/**'
      - 'Dockerfile'
      - 'package.json' # Root package.json
      - 'yarn.lock' # Root yarn.lock
      - '.github/workflows/deploy-backend.yml'

jobs:
  build_and_push_to_docker_hub:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.meta.outputs.tags }} # Pass the full image name with tag
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # SET THIS SECRET IN GITHUB REPO SETTINGS
          password: ${{ secrets.DOCKERHUB_TOKEN }} # SET THIS SECRET IN GITHUB REPO SETTINGS

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_BACKEND_IMAGE_NAME || 'roulette-backend' }} # SET DOCKERHUB_BACKEND_IMAGE_NAME SECRET or use default
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_to_ec2:
    needs: build_and_push_to_docker_hub
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_BACKEND }}
          username: ${{ secrets.EC2_USER_BACKEND }}
          key: ${{ secrets.EC2_SSH_KEY_BACKEND }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.

            # Define image and container names (use secrets or defaults)
            DOCKERHUB_USER="${{ secrets.DOCKERHUB_USERNAME }}" # Ensure this secret is set
            IMAGE_REPO_NAME="${{ secrets.DOCKERHUB_BACKEND_IMAGE_NAME || 'roulette-backend' }}" # Ensure this secret is set or use default
            FULL_IMAGE_NAME_LATEST="$DOCKERHUB_USER/$IMAGE_REPO_NAME:latest"
            CONTAINER_NAME="${{ secrets.EC2_BACKEND_CONTAINER_NAME || 'roulette-backend-container' }}" # SET THIS SECRET or use default

            echo "--- Logging into Docker Hub on EC2 (if needed for private images or as good practice) ---"
            # Ensure DOCKERHUB_TOKEN is available on EC2 if pulling private images, or configure credentials beforehand.
            # For public images, login might not be strictly necessary but is good practice.
            docker login -u "$DOCKERHUB_USER" -p "${{ secrets.DOCKERHUB_TOKEN_EC2_PULL || secrets.DOCKERHUB_TOKEN }}" # Use a specific token for EC2 pull if desired

            echo "--- Pulling latest image: $FULL_IMAGE_NAME_LATEST ---"
            docker pull "$FULL_IMAGE_NAME_LATEST"

            echo "--- Stopping and removing old container (if exists): $CONTAINER_NAME ---"
            if [ "$(docker ps -q -f name=^/$CONTAINER_NAME$)" ]; then
                docker stop "$CONTAINER_NAME"
                docker rm "$CONTAINER_NAME"
            elif [ "$(docker ps -aq -f status=exited -f name=^/$CONTAINER_NAME$)" ]; then
                docker rm "$CONTAINER_NAME"
            fi

            echo "--- Running new container: $CONTAINER_NAME from $FULL_IMAGE_NAME_LATEST ---"
            # IMPORTANT: Add any necessary -e flags for environment variables or --env-file for your application
            # Example: -e DATABASE_URL="${{ secrets.EC2_DATABASE_URL }}"
            # Example: --env-file /path/to/your/backend.env on the EC2 instance
            # The port mapping 3000:3000 assumes your EC2 instance's port 3000 is free and security group allows traffic.
            docker run -d --name "$CONTAINER_NAME" -p 80:3000 \
              --restart always \
              -e DATABASE_URL="${{ secrets.EC2_DATABASE_URL }}" \
              -e JWT_SECRET="${{ secrets.EC2_JWT_SECRET }}" \
              -e CORS_ORIGIN="${{ secrets.EC2_CORS_ORIGIN }}" \
              -e PORT="${{ secrets.EC2_PORT_BACKEND }}" \
              "$FULL_IMAGE_NAME_LATEST"

            echo "--- Cleaning up old Docker images on EC2 ---"
            docker image prune -af # Remove all unused images forcefully

            echo "--- Deployment to EC2 complete ---"
