name: Deploy Backend to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**' # 백엔드 코드 변경 시
      - 'package.json' # 루트 의존성 변경 시
      - 'yarn.lock'
      - '.github/workflows/deploy-backend.yml'
      - 'Dockerfile.backend' # Dockerfile 변경 시

env:
  # Docker Hub 정보
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_REPO_NAME: roulette-backend # Docker Hub 리포지토리 이름
  
  # EC2에서 실행될 컨테이너 정보
  CONTAINER_NAME: roulette-backend-service
  EC2_ENV_FILE_PATH: /home/${{ secrets.EC2_USER_BACKEND }}/roulette/.env # .env 파일 경로

jobs:
  build-and-deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        if: env.DOCKERHUB_USERNAME
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-image
        run: |
          FULL_REPO_NAME="$DOCKERHUB_USERNAME/$DOCKERHUB_REPO_NAME"
          IMAGE_TAG="latest"
          
          # Docker 빌드 (최상단 디렉토리에서 실행)
          # -f 옵션으로 Dockerfile.backend 파일을 지정합니다.
          # '.'은 현재 디렉토리(루트)를 빌드 컨텍스트로 사용함을 의미합니다.
          docker build -t "$FULL_REPO_NAME:$IMAGE_TAG" -f Dockerfile.backend .
          
          # Docker Hub로 푸시
          docker push "$FULL_REPO_NAME:$IMAGE_TAG"
          
          # 다음 단계에서 사용할 이미지 이름 설정
          echo "image_to_pull=$FULL_REPO_NAME:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Deploy to EC2
        if: steps.build-image.conclusion == 'success'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_BACKEND }}
          username: ${{ secrets.EC2_USER_BACKEND }}
          key: ${{ secrets.EC2_SSH_KEY_BACKEND }}
          script: |
            set -e
            echo "Deployment started on EC2: ${{ env.image_to_pull }}"
            
            # 최신 Docker 이미지 가져오기
            docker pull ${{ env.image_to_pull }}
            
            # 기존 컨테이너 중지 및 삭제
            echo "Stopping and removing existing container: ${{ env.CONTAINER_NAME }}"
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
            
            # 새 컨테이너 실행
            echo "Starting new container: ${{ env.CONTAINER_NAME }}"
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              -p 3000:3000 \
              --network="host" \
              --env-file ${{ env.EC2_ENV_FILE_PATH }} \
              --restart unless-stopped \
              ${{ env.image_to_pull }}
            
            echo "Cleaning up old Docker images (optional)..."
            docker image prune -af || true
            
            echo "Deployment to EC2 finished successfully!"