# --- 1. 빌드 단계 (Builder Stage) ---
# 이 단계에서는 전체 모노레포 컨텍스트를 사용하여 백엔드를 빌드합니다.
FROM node:22-alpine AS builder

WORKDIR /app

# 의존성 정의 파일들만 먼저 복사하여 레이어 캐싱을 활용합니다.
# 루트의 package.json, yarn.lock을 복사합니다.
COPY package.json yarn.lock ./

# 각 워크스페이스의 package.json도 복사해야 yarn이 구조를 이해합니다.
COPY frontend/package.json ./frontend/package.json
COPY backend/package.json ./backend/package.json

# 전체 의존성을 설치합니다 (devDependencies 포함).
RUN yarn install --frozen-lockfile

# 전체 소스 코드를 복사합니다.
COPY . .

# 백엔드 워크스페이스만 타겟으로 하여 빌드합니다.
# 'backend'는 backend/package.json의 "name" 필드 값에 따라 변경될 수 있습니다.
# 만약 name이 "@roulette/backend" 라면 "yarn workspace @roulette/backend build"로 수정하세요.
RUN yarn workspace backend build


# --- 2. 프로덕션 단계 (Production Stage) ---
# 이 단계에서는 빌드된 결과물과 프로덕션용 의존성만 포함하는 가벼운 이미지를 만듭니다.
FROM node:22-alpine

WORKDIR /app

# 프로덕션 의존성 설치를 위해 필요한 파일들을 빌더에서 복사합니다.
COPY --from=builder /app/package.json \
     --from=builder /app/yarn.lock \
     ./
COPY --from=builder /app/backend/package.json ./backend/package.json
COPY --from=builder /app/frontend/package.json ./frontend/package.json

# 프로덕션 의존성만 설치합니다. (개발용 의존성 제외)
# 이 과정은 최종 이미지에 필요한 node_modules만 생성합니다.
RUN yarn install --production --frozen-lockfile

# 빌드 단계에서 생성된 백엔드의 빌드 결과물(dist 폴더)을 복사합니다.
COPY --from=builder /app/backend/dist ./backend/dist

# 애플리케이션 시작!
# CMD 경로는 'backend' 폴더를 포함해야 합니다.
CMD ["node", "backend/dist/main"]